import re
from langchain.utilities import SQLDatabase
import os
from dotenv import load_dotenv

load_dotenv()

user = os.getenv("USER")
pwd = os.getenv("PSWD")
database_url = os.getenv("DATABASE_URL")

# --------------------------------------------------------------------

def get_db(db_name:str="postgres",include_tables:list=None):

    if include_tables:
        return SQLDatabase.from_uri(
            f"postgresql://{user}:{pwd}@{database_url}/{db_name}",
            sample_rows_in_table_info=0,
            include_tables=include_tables,
        )
    else:
        return SQLDatabase.from_uri(
            f"postgresql://{user}:{pwd}@{database_url}/{db_name}",
            sample_rows_in_table_info=0,
        )

# For multi table query, use dvdrental database
#TO DO: Wrap this all in a class
db = get_db(db_name="dvdrental",include_tables=["actor","film","film_actor"])
# db = get_db(db_name="postgres")

# --------------------------------------------------------------------

# These are passed in RunnablePassthrough


def get_schema(_):
    return db.get_table_info()


def run_query(query):
    return db.run(query)


# --------------------------------------------------------------------

# Gemma specific custom parser, as LLM output is different.


def custom_str_parser(output):
    """Parses the SQL query from Gemma-7b's output, handling variations."""
    return output.replace("\\","")


# --------------------------------------------------------------------


# Handle when no SQL query is generated by initial chain.
def handle_error_query(data):
    if "error" in data["query"].lower():
        return "This query seems to contain an error. Please rephrase it."
    else:
        return db.run(data["query"])


# --------------------------------------------------------------------
